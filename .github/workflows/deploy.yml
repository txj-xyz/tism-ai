name: Deploy
on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  deploy:
    name: Deploy
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    permissions:
      id-token: write # Needed for auth with Deno Deploy
      contents: read # Needed to clone the repository

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Install step
        run: deno i

      - name: Compile step
        run: deno compile --allow-read --allow-net -o build/ ./chat.ts
      
      - name: Version Timestamp (Linux and macOS)
        if: matrix.os != 'windows-latest'
        id: get_version_unix
        run: |
          echo "version=stable-$(date +%s)" >> $GITHUB_ENV

      - name: Version Timestamp (Windows)
        if: matrix.os == 'windows-latest'
        id: get_version_win
        run: |
          echo "version=stable-$((Get-Date).Ticks)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Artifact Build step
        uses: actions/upload-artifact@v4
        with:
          name: tism-ai-${{ env.version }}-${{ matrix.os }}
          path: build
      
      - name: Create ZIP Artifact Release (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd build && zip -r ../tism-ai-${{ env.version }}-${{ matrix.os }}.zip .
      
      - name: Create ZIP Artifact Release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build && Compress-Archive -Path * -DestinationPath ..\tism-ai-${{ env.version }}-${{ matrix.os }}.zip
        shell: pwsh